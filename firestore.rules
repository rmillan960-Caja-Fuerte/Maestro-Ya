rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user has an admin role document.
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isOwnerRole() {
      // Check if the user has an owner role document.
      return exists(/databases/$(database)/documents/roles_owner/$(request.auth.uid));
    }

    // USERS
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow list: if isAdmin();
    }

    // ROLES
    match /roles_admin/{userId} {
      allow get: if isAdmin() || isOwner(userId);
      allow list: if isAdmin();
      allow create, delete: if isOwnerRole();
    }
    match /roles_owner/{userId} {
      allow get: if isOwnerRole();
      allow list: if isOwnerRole();
      // Owner creation/deletion should be handled with care, likely via a trusted server process.
      allow create, delete: if false; 
    }

    // CLIENTS
    match /clients/{clientId} {
      allow get, list: if isAdmin() || isOwnerRole();
      // Any authenticated user can create a client, useful for the main app.
      // Admins can also create/update/delete clients.
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() || isOwnerRole();
    }

    // MASTERS (TECHNICIANS)
    match /masters/{masterId} {
        allow get, list: if isAdmin() || isOwnerRole();
        allow create, update, delete: if isAdmin() || isOwnerRole();
    }

    // SERVICE REQUESTS
    match /serviceRequests/{serviceRequestId} {
      // An admin/owner can see all requests.
      // A user can see their own request.
      // An assigned master can see the request.
      allow get: if isAdmin() || isOwnerRole() || resource.data.clientId == request.auth.uid || resource.data.assignedMaster.id == request.auth.uid;
      allow list: if isAdmin() || isOwnerRole();

      // AN ADMIN/OWNER CAN CREATE A REQUEST FOR A CLIENT.
      // A user can also create a request for themselves (future mobile app).
      allow create: if (isAdmin() || isOwnerRole()) || (isSignedIn() && request.resource.data.clientId == request.auth.uid) ;

      // An admin can update any field.
      // A client can update certain fields (e.g. status to 'Canceled')
      // An assigned master can update status.
      allow update: if isAdmin() || isOwnerRole() || resource.data.clientId == request.auth.uid || resource.data.assignedMaster.id == request.auth.uid;

      // Only admins/owners can delete.
      allow delete: if isAdmin() || isOwnerRole();
      
      // Subcollections
      match /{allSubcollections=**} {
        allow read, write: if isAdmin() || isOwnerRole();
      }
    }
  }
}