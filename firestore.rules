/**
 * @file This file defines the Firestore Security Rules for the ServiYa application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data, role-based access for administrative functions,
 * and shared access for collaborative entities like service requests. It prioritizes security through denormalization
 * and structural segregation to ensure authorization independence. The rules implement a Database-Based Access Control
 * (DBAC) model where user roles are determined by the presence of documents in specific collections (e.g., /roles_admin/{userId}).
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user profiles. Accessible only by the user and admins.
 * - /roles_admin/{userId}, /roles_owner/{userId}: Indicate admin/owner roles. Existence of a document grants the role.
 * - /clients/{clientId}: Stores client profiles. Accessible by the client and admins.
 * - /serviceRequests/{serviceRequestId}: Stores service requests. Accessible by the client who created the request,
 *   assigned technician, and admins. Contains denormalized clientId and assignedTechnicianId for efficient filtering.
 * - /serviceRequests/{serviceRequestId}/quotations/{quotationId}: Stores quotations for service requests.
 * - /serviceRequests/{serviceRequestId}/payments/{paymentId}: Stores payments for service requests.
 * - /serviceRequests/{serviceRequestId}/tasks/{taskId}: Stores tasks for service requests.
 * - /users/{userId}/notifications/{notificationId}: Stores notifications for users. Accessible only by the user.
 * - /serviceRequests/{serviceRequestId}/files/{fileId}: Stores files related to service requests.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied.
 * - Roles are managed through document existence in /roles_admin and /roles_owner collections, avoiding custom claims.
 * - Ambiguous relationships default to the most secure interpretation (owner-only access).
 *
 * Denormalization for Authorization:
 * - Service requests denormalize clientId and assignedTechnicianId directly onto the document to avoid costly get() calls
 *   when determining access permissions.
 *
 * Structural Segregation:
 * - User-specific data (notifications) is stored in private subcollections under /users/{userId}, ensuring that only
 *   the user can access their own notifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by verifying the existence of a document in `/roles_admin/{userId}`.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

        /**
     * @description Checks if the authenticated user has owner privileges by verifying the existence of a document in `/roles_owner/{userId}`.
     */
    function isOwnerRole() {
      return exists(/databases/$(database)/documents/roles_owner/$(request.auth.uid));
    }


    /**
     * @description Defines access rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access/modify their own profile or if is admin or owner role.
     * @deny (list) - Listing all users is forbidden.
     * @deny (create) - User cannot create other users profiles.
     * @deny (update, delete) - User cannot modify or delete other users profiles.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin() || isOwnerRole();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin() || isOwnerRole();
      allow delete: if isExistingOwner(userId) || isAdmin() || isOwnerRole();
    }

      /**
     * @description Defines access rules for roles admin profiles.
     * @path /roles_admin/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access/modify their own profile or if is admin or owner role.
     * @deny (list) - Listing all users is forbidden.
     * @deny (create) - User cannot create other users profiles.
     * @deny (update, delete) - User cannot modify or delete other users profiles.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin() || isOwnerRole();
      allow list: if false;
      allow create: if isOwnerRole();
      allow update: if false;
      allow delete: if isOwnerRole();
    }

          /**
     * @description Defines access rules for roles owner profiles.
     * @path /roles_owner/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access/modify their own profile or if is admin or owner role.
     * @deny (list) - Listing all users is forbidden.
     * @deny (create) - User cannot create other users profiles.
     * @deny (update, delete) - User cannot modify or delete other users profiles.
     */
    match /roles_owner/{userId} {
      allow get: if isOwnerRole();
      allow list: if false;
      allow create: if isOwnerRole();
      allow update: if false;
      allow delete: if isOwnerRole();
    }

    /**
     * @description Defines access rules for client profiles.
     * @path /clients/{clientId}
     * @allow (get) - Authenticated user can get their own profile or if is admin or owner role.
     * @allow (list) - Admins and Owners can list all clients.
     * @allow (create) - Authenticated user can create their own profile if the clientId matches their auth.uid or if is admin or owner role.
     * @allow (update) - Authenticated user can modify their own profile or if is admin or owner role.
     * @allow (delete) - Authenticated user can delete their own profile or if is admin or owner role.
     * @deny (create) - User cannot create other users profiles.
     * @deny (update, delete) - User cannot modify or delete other users profiles.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId) || isAdmin() || isOwnerRole();
      allow list: if isAdmin() || isOwnerRole();
      allow create: if isSignedIn();
      allow update: if isExistingOwner(clientId) || isAdmin() || isOwnerRole();
      allow delete: if isExistingOwner(clientId) || isAdmin() || isOwnerRole();
    }

    /**
     * @description Defines access rules for service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (get, list) - Allow anyone to read service requests
     * @allow (create) - Allow any signed in user to create service requests
     * @allow (update, delete) - Only allow signed in users if the request exists.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines access rules for quotations under a specific service request.
     * @path /serviceRequests/{serviceRequestId}/quotations/{quotationId}
     */
    match /serviceRequests/{serviceRequestId}/quotations/{quotationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines access rules for payments under a specific service request.
     * @path /serviceRequests/{serviceRequestId}/payments/{paymentId}
     */
    match /serviceRequests/{serviceRequestId}/payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines access rules for tasks under a specific service request.
     * @path /serviceRequests/{serviceRequestId}/tasks/{taskId}
     */
    match /serviceRequests/{serviceRequestId}/tasks/{taskId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Defines access rules for notifications for a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create) - Authenticated user can create their own notification if the userId matches their auth.uid.
     * @allow (get, update, delete) - Authenticated user can access/modify their own notification.
     * @allow (list) - Authenticated user can list their own notifications.
     * @deny (create) - User cannot create other users notifications.
     * @deny (update, delete) - User cannot modify or delete other users notifications.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for files under a specific service request.
     * @path /serviceRequests/{serviceRequestId}/files/{fileId}
     */
    match /serviceRequests/{serviceRequestId}/files/{fileId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}