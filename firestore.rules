/**
 * @fileoverview Firestore Security Rules for ServiYa Platform
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control (RBAC) security model,
 * supplemented by ownership checks for user-specific data.  Admin/Owner users
 * are stored in dedicated /roles_admin/{userId} and /roles_owner/{userId} collections, and their existance is validated to authorize access to the database.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible by the user and admins/owners.
 * - /roles_admin/{userId}, /roles_owner/{userId}:  Indicates admin or owner role via document existence.
 * - /clients/{clientId}: Client profiles, accessible by the client and admins/owners.
 * - /serviceRequests/{serviceRequestId}: Service requests, accessible by the client, assigned technician, and admins/owners. Includes denormalized clientId and assignedTechnicianId.
 * - /serviceRequests/{serviceRequestId}/quotations/{quotationId}: Quotations for a service request.
 * - /serviceRequests/{serviceRequestId}/payments/{paymentId}: Payments for a service request.
 * - /serviceRequests/{serviceRequestId}/tasks/{taskId}: Tasks for a service request.
 * - /users/{userId}/notifications/{notificationId}: Notifications for a user.
 * - /serviceRequests/{serviceRequestId}/files/{fileId}: Files related to a service request.
 *
 * Key Security Decisions:
 * - Roles are stored in the database (DBAC) rather than using custom claims.
 * - Authorization independence is achieved through denormalization of clientId and assignedTechnicianId in the serviceRequests collection.
 * - User listing is explicitly denied for the `/users` collection to protect user privacy.
 * - Read-only collections are not used in this design.
 *
 * Denormalization for Authorization:
 * - The `serviceRequests` collection denormalizes `clientId` and `assignedTechnicianId` to avoid `get()` calls for authorization checks,
 *   improving performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is an existing owner.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the existence of a document in the /roles_admin/{userId} collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

   /**
    * @description Checks if the user is an owner by verifying the existence of a document in the /roles_owner/{userId} collection.
    */
    function isOwnerRole() {
      return exists(/databases/$(database)/documents/roles_owner/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User tdcxxhBcApXURw1M3QHvCfVf4df1 creates their own profile.
     * @allow (get) User tdcxxhBcApXURw1M3QHvCfVf4df1 reads their own profile.
     * @deny (create) User abc creates user profile with id def.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin() || isOwnerRole();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin() || isOwnerRole();
      allow delete: if isExistingOwner(userId) || isAdmin() || isOwnerRole();
    }

     /**
      * @description Rules for admin users. Only admins can create/delete/update admin entries.
      * @path /roles_admin/{userId}
      * @allow (create) Admin user creates an admin entry.
      * @deny (create) Non-admin user tries to create an admin entry.
      */
    match /roles_admin/{userId} {
      allow get: if isAdmin() || isOwnerRole();
      allow list: if false;
      allow create: if isAdmin() || isOwnerRole();
      allow update: if false;
      allow delete: if isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for owner users. Only owners can create/delete/update owner entries.
     * @path /roles_owner/{userId}
     * @allow (create) Owner user creates an owner entry.
     * @deny (create) Non-owner user tries to create an owner entry.
     */
    match /roles_owner/{userId} {
      allow get: if isOwnerRole();
      allow list: if false;
      allow create: if isOwnerRole();
      allow update: if false;
      allow delete: if isOwnerRole();
    }

    /**
     * @description Rules for client profiles.
     * @path /clients/{clientId}
     * @allow (create) Client tdcxxhBcApXURw1M3QHvCfVf4df1 creates their own profile.
     * @allow (get) Client tdcxxhBcApXURw1M3QHvCfVf4df1 reads their own profile.
     * @deny (create) Client abc creates client profile with id def.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /clients/{clientId} {
      allow get: if isOwner(clientId) || isAdmin() || isOwnerRole();
      allow list: if isAdmin() || isOwnerRole();
      allow create: if isOwner(clientId);
      allow update: if isExistingOwner(clientId) || isAdmin() || isOwnerRole();
      allow delete: if isExistingOwner(clientId) || isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (create) Client tdcxxhBcApXURw1M3QHvCfVf4df1 creates a service request with clientId matching their ID.
     * @allow (get) Client tdcxxhBcApXURw1M3QHvCfVf4df1 reads a service request they created.
     * @deny (create) Client abc creates a service request with clientId def.
     * @principle Enforces document ownership for writes, restricts access to a user's own data.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if resource.data.clientId == request.auth.uid || resource.data.assignedTechnicianId == request.auth.uid || isAdmin() || isOwnerRole();
      allow list: if isSignedIn();
      allow create: if request.resource.data.clientId == request.auth.uid;
      allow update: if (resource.data.clientId == request.auth.uid || resource.data.assignedTechnicianId == request.auth.uid) && resource != null || isAdmin() || isOwnerRole();
      allow delete: if resource.data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for quotations under a service request.
     * @path /serviceRequests/{serviceRequestId}/quotations/{quotationId}
     */
    match /serviceRequests/{serviceRequestId}/quotations/{quotationId} {
      allow get: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow list: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow create: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow update: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
      allow delete: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for payments under a service request.
     * @path /serviceRequests/{serviceRequestId}/payments/{paymentId}
     */
    match /serviceRequests/{serviceRequestId}/payments/{paymentId} {
      allow get: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow list: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow create: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow update: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
      allow delete: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for tasks under a service request.
     * @path /serviceRequests/{serviceRequestId}/tasks/{taskId}
     */
    match /serviceRequests/{serviceRequestId}/tasks/{taskId} {
      allow get: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow list: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow create: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow update: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
      allow delete: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for notifications for a user.
     * @path /users/{userId}/notifications/{notificationId}
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId) || isAdmin() || isOwnerRole();
      allow list: if isOwner(userId) || isAdmin() || isOwnerRole();
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin() || isOwnerRole();
      allow delete: if isExistingOwner(userId) || isAdmin() || isOwnerRole();
    }

    /**
     * @description Rules for files under a service request.
     * @path /serviceRequests/{serviceRequestId}/files/{fileId}
     */
    match /serviceRequests/{serviceRequestId}/files/{fileId} {
      allow get: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow list: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow create: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid || isAdmin() || isOwnerRole();
      allow update: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
      allow delete: if get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId == request.auth.uid && resource != null || isAdmin() || isOwnerRole();
    }
  }
}