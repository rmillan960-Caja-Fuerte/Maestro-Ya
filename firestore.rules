rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) User with matching {userId} can access their own profile.
     * @deny (read, write) User attempting to access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Allows any signed-in user to read data
      allow get: if isSignedIn() && isOwner(userId);
      // Allows any signed-in user to list data
      allow list: if false;
      // Allows a user to create their own profile if the userId matches their auth.uid
      allow create: if isSignedIn() && isOwner(userId);
      // Allows a user to update their own profile if they are the owner
      allow update: if isSignedIn() && isOwner(userId);
      // Allows a user to delete their own profile if they are the owner
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (create) Only allows signed-in users to create with matching {userId}
     * @deny (read, write) No one can read, list, update, or delete admin role assignments directly.
     * @principle Existence of the document grants admin privileges.
     */
    match /roles_admin/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to owner role assignments.
     * @path /roles_owner/{userId}
     * @allow (create) Only allows signed-in users to create with matching {userId}
     * @deny (read, write) No one can read, list, update, or delete owner role assignments directly.
     * @principle Existence of the document grants owner privileges.
     */
    match /roles_owner/{userId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to client profiles.
     * @path /clients/{clientId}
     * @allow (read, write) Client with matching {clientId} can access their own profile. Admins can also access.
     * @deny (read, write) User attempting to access another client's profile without being an admin.
     * @principle Enforces document ownership for client profiles.
     */
    match /clients/{clientId} {
      allow get: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (isOwner(clientId) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(clientId) || isAdmin());
    }

    /**
     * @description Controls access to service requests.
     * @path /serviceRequests/{serviceRequestId}
     * @allow (read, write) Client who created the request, assigned technician, and admins can access.
     * @deny (read, write) User attempting to access a service request without proper authorization.
     * @principle Allows access to service requests based on ownership and admin roles.
     */
    match /serviceRequests/{serviceRequestId} {
      allow get: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow list: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow create: if isSignedIn(); // CRITICAL: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
    }

    /**
     * @description Controls access to quotations for a specific service request.
     * @path /serviceRequests/{serviceRequestId}/quotations/{quotationId}
     * @allow (read, write) Inherits access control from the parent service request.
     * @deny (read, write) User attempting to access a quotation without proper authorization based on the parent service request.
     * @principle Inherits access control from the parent service request.
     */
    match /serviceRequests/{serviceRequestId}/quotations/{quotationId} {
          allow get: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
    }

    /**
     * @description Controls access to payments for a specific service request.
     * @path /serviceRequests/{serviceRequestId}/payments/{paymentId}
     * @allow (read, write) Inherits access control from the parent service request.
     * @deny (read, write) User attempting to access a payment without proper authorization based on the parent service request.
     * @principle Inherits access control from the parent service request.
     */
    match /serviceRequests/{serviceRequestId}/payments/{paymentId} {
       allow get: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
        allow list: if false;
      allow create: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
    }

    /**
     * @description Controls access to tasks for a specific service request.
     * @path /serviceRequests/{serviceRequestId}/tasks/{taskId}
     * @allow (read, write) Inherits access control from the parent service request.
     * @deny (read, write) User attempting to access a task without proper authorization based on the parent service request.
     * @principle Inherits access control from the parent service request.
     */
    match /serviceRequests/{serviceRequestId}/tasks/{taskId} {
      allow get: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
        allow list: if false;
      allow create: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
    }

    /**
     * @description Controls access to notifications for a specific user.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (read, write) Only the user with matching {userId} can access their own notifications.
     * @deny (read, write) User attempting to access another user's notifications.
     * @principle Enforces document ownership for notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && resource.data.userId == userId;
      allow delete: if isSignedIn() && resource.data.userId == userId;
    }

    /**
     * @description Controls access to files related to a specific service request.
     * @path /serviceRequests/{serviceRequestId}/files/{fileId}
     * @allow (read, write) Inherits access control from the parent service request.
     * @deny (read, write) User attempting to access a file without proper authorization based on the parent service request.
     * @principle Inherits access control from the parent service request.
     */
    match /serviceRequests/{serviceRequestId}/files/{fileId} {
       allow get: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
        allow list: if false;
      allow create: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow update: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
      allow delete: if isSignedIn() && (getClientId(serviceRequestId) == request.auth.uid || getAssignedTechnicianId(serviceRequestId) == request.auth.uid || isAdmin());
    }
  }

  // Helper functions

  // Checks if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Checks if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Checks if the user is the owner of the existing document
  function isExistingOwner(userId) {
    return isSignedIn() && request.auth.uid == userId && resource.data != null;
  }

  // Checks if the user is an admin (by checking for the existence of a document in the /roles_admin/{userId} collection)
  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }

    // Checks if the user is a owner (by checking for the existence of a document in the /roles_owner/{userId} collection)
  function isOwnerRole() {
    return exists(/databases/$(database)/documents/roles_owner/$(request.auth.uid));
  }


  // Checks if the user is the client of the service request (by checking the 'clientId' field in the document)
  function getClientId(serviceRequestId) {
    return get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId;
  }

  // Checks if the user is the assigned technician for the service request (by checking the 'assignedTechnicianId' field in the document)
  function getAssignedTechnicianId(serviceRequestId) {
    return get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId;
  }

    // Checks if the user is the owner of the notification
  function getNotificationUserId(userId, notificationId) {
      return get(/databases/$(database)/documents/users/$(userId)/notifications/$(notificationId)).data.userId;
  }
}