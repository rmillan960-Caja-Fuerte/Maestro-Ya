/**
 * @fileoverview Firestore Security Rules for the ServiYa application.
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid access control model:
 * 1. User-owned data (e.g., profiles, notifications) is secured using path-based ownership checks.
 * 2. Collaborative data (e.g., service requests, quotations) leverages denormalized role-based access control within the documents themselves.
 * 3. Existence-based role assignment for admins and owners.
 *
 * Data Structure:
 * - /users/{userId}: User profile information.
 * - /roles_admin/{userId}: Indicates admin role membership.
 * - /roles_owner/{userId}: Indicates owner role membership.
 * - /clients/{clientId}: Client profile information.
 * - /serviceRequests/{serviceRequestId}: Service request details, including client and technician assignments.
 * - /serviceRequests/{serviceRequestId}/quotations/{quotationId}: Quotations for service requests.
 * - /serviceRequests/{serviceRequestId}/payments/{paymentId}: Payments for service requests.
 * - /serviceRequests/{serviceRequestId}/tasks/{taskId}: Tasks related to service requests.
 * - /users/{userId}/notifications/{notificationId}: Notifications for users.
 * - /serviceRequests/{serviceRequestId}/files/{fileId}: Files related to service requests.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Only admins can create, update, or delete client profiles.
 * - Service requests are accessible to the client who created them, the assigned technician, and admins.
 * - Subcollections (quotations, payments, tasks, files, notifications) inherit the access control of their parent documents.
 * - Listing of the `users` collection is explicitly denied.
 *
 * Denormalization for Authorization:
 * - ServiceRequest documents include 'clientId' and 'assignedTechnicianId' to avoid costly `get()` calls when checking permissions.
 *
 * Structural Segregation:
 * - Private user notifications are stored under /users/{userId}/notifications/{notificationId} to prevent accidental public listing.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Secure user profiles. Users can only read/write their own profile.
     * @path: /users/{userId}
     * @allow: User (create) can create their own profile with matching userId.
     * @deny: User (create) tries to create a profile with a different userId.
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && isSignedIn();
      allow delete: if isOwner(userId) && isSignedIn() && resource != null;
    }

        /**
         * @description: Restricts access to the `users` collection.
         * @path: /users
         * @allow: N/A - listing is always denied.
         * @deny: Any attempt to list users.
         * @principle: Prevents unauthorized enumeration of user accounts.
         */
        match /users {
            allow list: if false;
        }

    /**
     * @description: Secure admin role assignment. Only admins can create/delete these documents.
     * @path: /roles_admin/{userId}
     * @allow: Admin (create) can create an admin role document.
     * @deny: Non-admin (create) tries to create an admin role document.
     * @principle: Existence-based role assignment.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Secure owner role assignment. Only owners can create/delete these documents.
     * @path: /roles_owner/{userId}
     * @allow: Owner (create) can create an owner role document.
     * @deny: Non-owner (create) tries to create an owner role document.
     * @principle: Existence-based role assignment.
     */
    match /roles_owner/{userId} {
      function isOwnerRole() {
        return exists(/databases/$(database)/documents/roles_owner/$(request.auth.uid));
      }

      allow get: if isOwnerRole();
      allow list: if false;
      allow create: if isOwnerRole();
      allow update: if false;
      allow delete: if isOwnerRole() && resource != null;
    }

    /**
     * @description: Secure client profiles. Only admins can create/update/delete clients. Clients can read their own profile.
     * @path: /clients/{clientId}
     * @allow: Admin (create) can create a client profile.
     * @deny: Non-admin (create) tries to create a client profile.
     * @principle: Role-based access control.
     */
    match /clients/{clientId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isOwner(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }

      allow get: if isAdmin() || isOwner(clientId);
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Secure service requests. Accessible to the client who created the request, the assigned technician, and admins.
     * @path: /serviceRequests/{serviceRequestId}
     * @allow: Client (create) can create a service request with matching clientId.
     * @deny: Client (create) tries to create a service request with a different clientId.
     * @principle: Document ownership and role-based access control.
     */
    match /serviceRequests/{serviceRequestId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isAssignedTechnician(assignedTechnicianId) {
        return request.auth != null && request.auth.uid == assignedTechnicianId;
      }

      function isClient(clientId) {
        return request.auth != null && request.auth.uid == clientId;
      }

      allow get: if isAdmin() || isAssignedTechnician(resource.data.assignedTechnicianId) || isClient(resource.data.clientId);
      allow list: if isAdmin() || isAssignedTechnician(request.auth.uid) || isClient(request.auth.uid);
      allow create: if isClient(request.resource.data.clientId);
      allow update: if isAdmin() || isAssignedTechnician(resource.data.assignedTechnicianId) || isClient(resource.data.clientId) && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Secure quotations for a specific service request.
     * @path: /serviceRequests/{serviceRequestId}/quotations/{quotationId}
     */
    match /serviceRequests/{serviceRequestId}/quotations/{quotationId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isAssignedTechnician(assignedTechnicianId) {
            return request.auth != null && request.auth.uid == assignedTechnicianId;
        }

        function isClient(clientId) {
            return request.auth != null && request.auth.uid == clientId;
        }

        allow get: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow list: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow create: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Secure payments for a specific service request.
     * @path: /serviceRequests/{serviceRequestId}/payments/{paymentId}
     */
    match /serviceRequests/{serviceRequestId}/payments/{paymentId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isAssignedTechnician(assignedTechnicianId) {
            return request.auth != null && request.auth.uid == assignedTechnicianId;
        }

        function isClient(clientId) {
            return request.auth != null && request.auth.uid == clientId;
        }

        allow get: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow list: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow create: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Secure tasks for a specific service request.
     * @path: /serviceRequests/{serviceRequestId}/tasks/{taskId}
     */
    match /serviceRequests/{serviceRequestId}/tasks/{taskId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isAssignedTechnician(assignedTechnicianId) {
            return request.auth != null && request.auth.uid == assignedTechnicianId;
        }

        function isClient(clientId) {
            return request.auth != null && request.auth.uid == clientId;
        }

        allow get: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow list: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow create: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description: Secure notifications for a specific user.
     * @path: /users/{userId}/notifications/{notificationId}
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description: Secure files related to a specific service request.
     * @path: /serviceRequests/{serviceRequestId}/files/{fileId}
     */
    match /serviceRequests/{serviceRequestId}/files/{fileId} {
        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isAssignedTechnician(assignedTechnicianId) {
            return request.auth != null && request.auth.uid == assignedTechnicianId;
        }

        function isClient(clientId) {
            return request.auth != null && request.auth.uid == clientId;
        }

        allow get: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow list: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow create: if isAdmin() || isAssignedTechnician(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.assignedTechnicianId) || isClient(get(/databases/$(database)/documents/serviceRequests/$(serviceRequestId)).data.clientId);
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}